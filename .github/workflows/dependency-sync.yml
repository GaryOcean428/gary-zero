# Lightweight dependency synchronization workflow
# Triggers only on changes to requirements.* files

name: Dependency Sync

on:
  push:
    paths:
      - 'requirements.in'
      - 'requirements.txt'
      - 'requirements-dev.txt'
  pull_request:
    paths:
      - 'requirements.in'
      - 'requirements.txt'
      - 'requirements-dev.txt'

env:
  PYTHON_VERSION: "3.12"

jobs:
  validate-dependencies:
    name: Validate & Sync Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      run: |
        python -m pip install --upgrade pip
        pip install uv
    
    - name: Regenerate requirements.txt
      run: |
        uv pip compile requirements.in -o requirements.check.txt
    
    - name: Compare requirements files
      run: |
        # Sort and normalize both files for comparison
        sort requirements.txt > requirements.sorted.txt
        sort requirements.check.txt > requirements.check.sorted.txt
        
        # Check if files differ
        if ! diff -q requirements.sorted.txt requirements.check.sorted.txt > /dev/null; then
          echo "‚ùå ERROR: requirements.txt is out of sync with requirements.in!"
          echo "Please regenerate requirements.txt using:"
          echo "  uv pip compile requirements.in -o requirements.txt"
          echo ""
          echo "üìã Differences found:"
          diff requirements.sorted.txt requirements.check.sorted.txt || true
          exit 1
        else
          echo "‚úÖ requirements.txt is in sync with requirements.in"
        fi
    
    - name: Verify critical dependencies
      run: |
        # Check for FastAPI and related packages
        for pkg in fastapi uvicorn websockets; do
          if ! grep -q "^$pkg" requirements.txt; then
            echo "‚ùå ERROR: Missing critical dependency: $pkg"
            exit 1
          fi
        done
        echo "‚úÖ All critical dependencies present"
    
    - name: Security audit on dependencies
      run: |
        pip install safety
        # Check for known security vulnerabilities
        safety check --json --output safety-deps.json || true
        if safety check; then
          echo "‚úÖ No known security vulnerabilities found"
        else
          echo "‚ö†Ô∏è Security vulnerabilities detected - review required"
        fi
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-report
        path: safety-deps.json
