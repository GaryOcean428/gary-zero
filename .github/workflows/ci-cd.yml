name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  # Security scanning and dependency checking
  security:
    name: Security & Dependency Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          pip install -r requirements.txt

      - name: Run Safety (dependency vulnerability scan)
        run: |
          safety check --json --output safety-report.json || true
        continue-on-error: true

      - name: Run Bandit (security linting)
        run: |
          bandit -r framework/ api/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Run Semgrep (SAST)
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        run: |
          semgrep --config=auto framework/ api/ --json --output=semgrep-report.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  # Code quality and linting
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          npm install -g prettier eslint stylelint markdownlint-cli2

      - name: Python code formatting (Black)
        run: |
          black --check --diff framework/ api/ tests/

      - name: Python linting (Ruff)
        run: |
          ruff check framework/ api/ tests/ --output-format=github

      - name: Python type checking (MyPy)
        run: |
          mypy framework/ api/ --ignore-missing-imports

      - name: JavaScript/CSS linting
        run: |
          if [ -f "webui/package.json" ]; then
            cd webui && npm ci && npm run lint || true
          fi

      - name: Markdown linting
        run: |
          markdownlint-cli2 "**/*.md" "!node_modules" || true

  # Comprehensive testing
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    needs: [security, quality]
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        test-suite: ["unit", "integration", "security"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-xdist
          pip install -r requirements.txt

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools postgresql-client

      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: |
          pytest tests/unit/ tests/domain/ -v \
            --cov=framework \
            --cov=api \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --maxfail=5 \
            -x

      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
        run: |
          pytest tests/integration/ -v \
            --maxfail=3 \
            --timeout=300

      - name: Run security tests
        if: matrix.test-suite == 'security'
        run: |
          pytest tests/security/ -v \
            --cov=framework.security \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: true

  # Performance and load testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-benchmark locust
          pip install -r requirements.txt

      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json

      - name: Run load tests
        run: |
          # Start the application in background
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
          # Run load tests
          locust -f tests/load/locustfile.py --headless --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:8000 || true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            benchmark-results.json
            locust-report.html

  # Docker build and vulnerability scan
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: gary-zero:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: gary-zero:latest
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # Deployment to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, quality, test, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway (Staging)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          railway login --token $RAILWAY_TOKEN
          railway deploy --service gary-zero-staging

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1

  # Production deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, quality, test, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Deploy to Railway (Production)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          railway login --token $RAILWAY_TOKEN
          railway deploy --service gary-zero

      - name: Run production smoke tests
        run: |
          sleep 60  # Wait for deployment
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Successfully deployed to production!"
          # Add notification to Slack/Discord/etc if configured

  # Documentation deployment
  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocstrings mkdocs-mermaid2-plugin
          pip install -r requirements.txt

      - name: Build documentation
        run: |
          mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Final status report
  status:
    name: Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [security, quality, test, performance, docker, deploy-staging, deploy-production, docs]
    if: always()

    steps:
      - name: Generate status report
        run: |
          echo "## Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Testing | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging Deploy | ${{ needs.deploy-staging.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY