[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gary-zero"
version = "0.9.0"
description = "Autonomous AI Agent Framework with Multi-Agent Cooperation"
readme = "README.md"
requires-python = ">=3.12"
license = {file = "LICENSE"}
authors = [
  {name = "Gary Ocean", email = "gary@garyocean.com"}
]
dependencies = [
  "fastapi>=0.115.5",
  "uvicorn[standard]>=0.32.1",
  "pydantic>=2.10.3",
  "asyncio-mqtt>=0.16.0",
  "playwright>=1.45.0",
  "docker>=7.1.0",
  "requests>=2.32.0",
  "websockets>=12.0",
  "psutil>=7.0.0",
  "langchain-core>=0.3.8",
  "langchain-anthropic>=0.3.0",
  "langchain-openai>=0.3.11",
  "python-dotenv>=1.1.0",
  "flask>=3.0.3",
  "gunicorn>=23.0.0",
  "fastmcp>=2.3.0",
  "mcp>=1.12.0",
  "redis>=5.2.0",
  "sqlalchemy>=2.0.36",
  "python-jose[cryptography]>=3.3.0",
  "bleach>=6.1.0",
  "shared-mcp @ file:///./shared_mcp"
]

[project.optional-dependencies]
dev = ["pytest>=8.2.0", "black>=24.4.0", "mypy>=1.10.0", "pre-commit>=3.7.0", "ruff>=0.11.13"]
test = ["pytest-cov>=5.0.0", "pytest-asyncio>=0.23.0", "httpx>=0.28.0", "pytest-mock>=3.12.0"]
security = ["bandit>=1.7.5", "safety>=2.3.0"]

[project.scripts]
gary-zero = "main:app"
gary-zero-cli = "run_cli:main"

[project.urls]
Homepage = "https://github.com/GaryOcean428/gary-zero"
Repository = "https://github.com/GaryOcean428/gary-zero"
Issues = "https://github.com/GaryOcean428/gary-zero/issues"

[tool.setuptools.packages.find]
where = ["framework"]
include = ["*"]
exclude = ["tests*", "webui*", "docker*", "docs*", "lib*", "logs*", "memory*", "prompts*", "knowledge*", "instruments*", "tmp*"]

[tool.black]
line-length = 100
target-version = ['py312']
extend-exclude = '''
(
  \.eggs
  | \.git
  | \.mypy_cache
  | \.venv
  | _build
  | build
  | dist
  | __pycache__
)
'''

[tool.ruff]
line-length = 88
target-version = "py312"
exclude = [
    ".git",
    ".mypy_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
# Lint rules
select = [
    "E",   # pycodestyle errors
    "W",   # pyflakes warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
    "SIM", # flake8-simplify
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "T201",  # print found
    "T203",  # pprint found
]

[tool.ruff.lint.isort]
known-first-party = ["framework"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can tighten later
ignore_missing_imports = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "__pycache__/",
]

[tool.pylint.messages_control]
disable = [
    "import-error",
    "missing-module-docstring",
    "missing-class-docstring", 
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "line-too-long",  # Let black handle this
]

[tool.pylint.format]
max-line-length = 100

[dependency-groups]
dev = [
    "black>=25.1.0",
    "detect-secrets>=1.5.0",
    "mypy>=1.16.0",
    "ruff>=0.11.13",
]

# Frontend linting tools (install separately with npm/yarn)
# npm install -g markdownlint-cli2 stylelint htmlhint prettier

[tool.coverage.run]
source = ["framework", "api", "security"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*", 
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/setup.py",
    "*/conftest.py",
    "*/tmp/*",
    "*/logs/*",
    "*/memory/*",
    "*/prompts/*",
    "*/knowledge/*",
    "*/instruments/*",
    "*/webui/*",
    "*/lib/*",
    "*/docker/*",
    "*/docs/*"
]
parallel = true
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "pass"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# detect-secrets configuration will be handled via command line args
# to avoid TOML regex escape issues
